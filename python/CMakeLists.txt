if (CMAKE_VERSION VERSION_LESS 3.18)
    SET(DEV_MODULE Development)
else()
    SET(DEV_MODULE Development.Module)
endif()
FIND_PACKAGE(Python REQUIRED COMPONENTS ${DEV_MODULE} Interpreter)

EXECUTE_PROCESS(
    COMMAND "${Python_EXECUTABLE}" -m nanobind --cmake_dir
    OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE nanobind_ROOT
    ERROR_STRIP_TRAILING_WHITESPACE ERROR_VARIABLE ERROR_STR
)
if (NOT ERROR_STR STREQUAL "")
    MESSAGE(FATAL_ERROR ${ERROR_STR})
endif()
FIND_PACKAGE(nanobind CONFIG REQUIRED)

NANOBIND_ADD_MODULE(py${PROJECT_NAME} STABLE_ABI)
SET_TARGET_PROPERTIES(py${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
TARGET_COMPILE_DEFINITIONS(
    py${PROJECT_NAME}
    PRIVATE
        PY_MODULE_NAME=${PROJECT_NAME}
)
TARGET_SOURCES(
    py${PROJECT_NAME}
    PRIVATE
        py${PROJECT_NAME}.cpp
)
TARGET_LINK_LIBRARIES(
    py${PROJECT_NAME}
    PRIVATE
        ${PROJECT_NAME}
)

NANOBIND_ADD_STUB(
    py${PROJECT_NAME}_stub
    MODULE ${PROJECT_NAME}
    OUTPUT ${PROJECT_NAME}.pyi
    PYTHON_PATH $<TARGET_FILE_DIR:py${PROJECT_NAME}>
    DEPENDS py${PROJECT_NAME}
)

INSTALL(TARGETS py${PROJECT_NAME} DESTINATION ${PROJECT_NAME})
INSTALL(
    FILES $<TARGET_FILE_DIR:py${PROJECT_NAME}>/${PROJECT_NAME}.pyi
    DESTINATION ${PROJECT_NAME}
)
